//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultiLevelCachePoC.CacheCore.UpperTierCache {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UpperTierCache.ILocalCacheOf_Engine")]
    public interface ILocalCacheOf_Engine {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalCacheOf_Engine/Insert", ReplyAction="http://tempuri.org/ILocalCacheOf_Engine/InsertResponse")]
        void Insert(MultiLevelCachePoC.CacheContracts.EntityContracts.Engine cacheItem, bool withSync);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalCacheOf_Engine/Insert", ReplyAction="http://tempuri.org/ILocalCacheOf_Engine/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(MultiLevelCachePoC.CacheContracts.EntityContracts.Engine cacheItem, bool withSync);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalCacheOf_Engine/Get", ReplyAction="http://tempuri.org/ILocalCacheOf_Engine/GetResponse")]
        MultiLevelCachePoC.CacheContracts.EntityContracts.Engine Get(string identifier, bool withSync);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalCacheOf_Engine/Get", ReplyAction="http://tempuri.org/ILocalCacheOf_Engine/GetResponse")]
        System.Threading.Tasks.Task<MultiLevelCachePoC.CacheContracts.EntityContracts.Engine> GetAsync(string identifier, bool withSync);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalCacheOf_Engine/Delete", ReplyAction="http://tempuri.org/ILocalCacheOf_Engine/DeleteResponse")]
        void Delete(string identifier, bool withSync);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalCacheOf_Engine/Delete", ReplyAction="http://tempuri.org/ILocalCacheOf_Engine/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(string identifier, bool withSync);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalCacheOf_Engine/ClearCache", ReplyAction="http://tempuri.org/ILocalCacheOf_Engine/ClearCacheResponse")]
        void ClearCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalCacheOf_Engine/ClearCache", ReplyAction="http://tempuri.org/ILocalCacheOf_Engine/ClearCacheResponse")]
        System.Threading.Tasks.Task ClearCacheAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILocalCacheOf_EngineChannel : MultiLevelCachePoC.CacheCore.UpperTierCache.ILocalCacheOf_Engine, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LocalCacheOf_EngineClient : System.ServiceModel.ClientBase<MultiLevelCachePoC.CacheCore.UpperTierCache.ILocalCacheOf_Engine>, MultiLevelCachePoC.CacheCore.UpperTierCache.ILocalCacheOf_Engine {
        
        public LocalCacheOf_EngineClient() {
        }
        
        public LocalCacheOf_EngineClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LocalCacheOf_EngineClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocalCacheOf_EngineClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocalCacheOf_EngineClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Insert(MultiLevelCachePoC.CacheContracts.EntityContracts.Engine cacheItem, bool withSync) {
            base.Channel.Insert(cacheItem, withSync);
        }
        
        public System.Threading.Tasks.Task InsertAsync(MultiLevelCachePoC.CacheContracts.EntityContracts.Engine cacheItem, bool withSync) {
            return base.Channel.InsertAsync(cacheItem, withSync);
        }
        
        public MultiLevelCachePoC.CacheContracts.EntityContracts.Engine Get(string identifier, bool withSync) {
            return base.Channel.Get(identifier, withSync);
        }
        
        public System.Threading.Tasks.Task<MultiLevelCachePoC.CacheContracts.EntityContracts.Engine> GetAsync(string identifier, bool withSync) {
            return base.Channel.GetAsync(identifier, withSync);
        }
        
        public void Delete(string identifier, bool withSync) {
            base.Channel.Delete(identifier, withSync);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string identifier, bool withSync) {
            return base.Channel.DeleteAsync(identifier, withSync);
        }
        
        public void ClearCache() {
            base.Channel.ClearCache();
        }
        
        public System.Threading.Tasks.Task ClearCacheAsync() {
            return base.Channel.ClearCacheAsync();
        }
    }
}
